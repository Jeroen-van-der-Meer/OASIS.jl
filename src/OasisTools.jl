module OasisTools

using CodecZlib
using GeometryBasics
import Mmap: mmap

export Cell
export CellPlacement
export Oasis
export oasisread
export PointGridRange
export Shape
export show_cells
export show_shapes

include("read_data.jl")
include("skip_data.jl")
include("modal_variables.jl")
include("structs.jl")
include("parse_records.jl")
include("parse_utils.jl")
include("shows.jl")

const MAGIC_BYTES = [0x25, 0x53, 0x45, 0x4d, 0x49, 0x2d, 0x4f, 0x41, 0x53, 0x49, 0x53, 0x0d, 0x0a]

"""
    oasisread(filename)

Read your OASIS file in Julia.

# Example

```julia
filename = "./test/testdata/circle.oas";
oas = oasisread(filename)
```

```
OASIS file v1.0 with the following cells: 
TOP
└─ BOTTOM (2×)
```

# Open Items

- If your OASIS file has been generated by software *other than* klayout, then it is not
  unlikely that your file will be parsed incorrectly. The reason is that klayout uses only a
  small part of the OASIS specification, and the parts that aren't used have not been thoroughly
  tested.
- Properties are currently ignored.
- Backwards-compatible extensions are not supported. You will get an error if your file contains
  any.
"""
function oasisread(filename::AbstractString)
    buf = mmap(filename)
    state = ParserState(buf)

    header = read_bytes(state, 13)
    @assert all(header .== MAGIC_BYTES) "Wrong header bytes; likely not an OASIS file."

    while true
        record_type = read_byte(state)
        record_type == 0x02 && break # Stop when encountering END record. Ignoring checksum.
        parse_record(record_type, state)
    end

    return state.oas
end

end # module OasisTools
